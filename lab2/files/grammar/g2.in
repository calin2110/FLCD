26
program
type
expression
complete_type
stmt
simpl_stmt
struct_stmt
decl_stmt
assign_stmt
io_stmt
var_decl_word
assign_operator
simple_sign
term
composite_sign
factor
read_stmt
write_stmt
unless_stmt
until_stmt
for_stmt
condition
for_body
forenum_stmt
foreach_stmt
relation
45
ID
CONST
fun
main
(
)
:
void
{
}
boolean
string
int
[
]
;
def
final
=
+=
-=
*=
/=
+
-
&&
||
*
/
%
read
write
unless
else
until
forenum
in
foreach
<
<=
>
>=
!=
==
,
44
program -> fun main ( ) : void { stmt }
type -> boolean
type -> string
type -> int
complete_type -> type
stmt -> simpl_stmt
stmt -> struct_stmt
simpl_stmt -> decl_stmt
simpl_stmt -> assign_stmt
simpl_stmt -> io_stmt
var_decl_word -> def
var_decl_word -> final
decl_stmt -> var_decl_word ID : type ;
decl_stmt -> var_decl_word ID : type = expression ;
assign_stmt -> ID assign_operator expression ;
assign_operator -> =
assign_operator -> +=
assign_operator -> -=
assign_operator -> *=
assign_operator -> /=
expression -> ID simple_sign term
simple_sign -> +
simple_sign -> -
simple_sign -> &&
simple_sign -> ||
term -> factor
composite_sign -> *
composite_sign -> %
composite_sign -> /
factor -> ID
factor -> CONST
io_stmt -> read_stmt
io_stmt -> write_stmt
read_stmt -> read ( ID ) ;
write_stmt -> write ( CONST ) ;
struct_stmt -> unless_stmt
struct_stmt -> until_stmt
unless_stmt -> unless ( condition ) { stmt }
relation -> <
relation -> <=
relation -> >
relation -> >=
relation -> !=
relation -> ==
program