syntax:
   
<program> ::= fun main(): void { <stmt_list> }

<type> ::= boolean | string | int

<array_type> ::= <type>[<expression>];

<complete_type> ::= <type> | <array_type>

<stmt_list> ::= <stmt> | <stmt> <stmt_list>

<stmt> ::= <simpl_stmt> | <struct_stmt>

<simpl_stmt> ::= <decl_stmt> | <assign_stmt> | <io_stmt>

<var_decl_word> ::= def | final

<decl_stmt> ::= <var_decl_word> <identifier> : <complete_type>; |
    <var_decl_word> <identifier> : <complete_type> = <expression>;
    
<assign_stmt> ::= <identifier> <assign_operator> <expression>;

<assign_operator> ::= =|+=|-=|*=|/=

<expression> ::= <expression> <simple_sign> <term> | <term>

<simple_sign> ::= +|-|&&|||

<term> ::= <term> <composite_sign> <factor> | <factor>

<composite_sign> ::= *|/|%

<factor> ::= (<expression>) | <identifier> | <constant>  | <identifier>[<expression>]

<io_stmt> ::= <read_stmt> | <write_stmt>

<read_stmt> ::= read(<identifier>);

<write_stmt> ::= write(<expression>);

<struct_stmt> ::= <unless_stmt> | <until_stmt> | <for_stmt>

<unless_stmt> ::= unless (<condition>) { <stmt_list> } |
    unless (<condition>) { <stmt_list> } else { <stmt_list> }
    
<until_stmt> ::= until (<condition>) { <stmt_list> }

<for_stmt> ::= <for_body> { <stmt_list> }

<for_body> ::= <forenum_stmt> | <foreach_stmt>

<forenum_stmt> ::= forenum (<identifier> in <expression>) |
    forenum (<identifier> in <expression>, <expression>) |
    forenum (<identifier> in <expression>, <expression>, <expression>)
    
<foreach_stmt> ::= foreach (<identifier> in <expression>)

<condition> ::= <expression> | <expression> <relation> <expression>

<relation> ::= <|<=|>|>=|!=|==